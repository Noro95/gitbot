
		// switch (sub?.[0]) {
		// 	case "list": {
		// 		const state = options?.get("state") || "open";
		// 		const head = options?.get("head");
		// 		const base = options?.get("base");
		// 		const sort = options?.get("sort") || "created";
		// 		const direction = options?.get("direction") || "desc";
		// 		let per_page = options?.get("per_page") || 10;

		// 		if (per_page >= 100) per_page = 99;

		// 		const list = await gh[1]?.rest.pulls.list({
		// 			owner,
		// 			repo,
		// 			state,
		// 			head,
		// 			base,
		// 			sort,
		// 			direction,
		// 			per_page,
		// 		});

		// 		if (!list)
		// 			return res.json({
		// 				type: InteractionResponseType.ChannelMessageWithSource,
		// 				data: {
		// 					content: "No pull requests found.",
		// 					flags: MessageFlags.Ephemeral,
		// 				},
		// 			});
		// 		const embeds: APIEmbed[] = [];
		// 		list?.data.forEach((item) => {
		// 			const embed = {
		// 				title: item.title + " #" + item.number,
		// 				url: item.html_url,
		// 				author: {
		// 					name: item.user!.login,
		// 					icon_url: item.user?.avatar_url,
		// 				},
		// 				description: item.body || "no description",
		// 				timestamp: item.created_at,
		// 				fields: [
		// 					{ name: "Base", value: item.base.label, inline: true },
		// 					{ name: "Head", value: item.head.label, inline: true },
		// 					{ name: "Issue", value: item.issue_url, inline: true },
		// 					{
		// 						name: "Locked",
		// 						value: item.locked ? "Yes" : "No",
		// 						inline: true,
		// 					},
		// 					{
		// 						name: "labels",
		// 						value: item.labels.map((label) => label.name).join(", "),
		// 						inline: true,
		// 					},
		// 				],
		// 				footer: {
		// 					text: "Page 1 of 1",
		// 				},
		// 			} as APIEmbed;
		// 			if (item.state === "closed") {
		// 				embed.fields?.push({
		// 					name: "State",
		// 					value: item.state,
		// 					inline: true,
		// 				});
		// 				if (item.closed_at)
		// 					embed.fields?.push({
		// 						name: "Closed At",
		// 						value: item.closed_at!,
		// 						inline: true,
		// 					});
		// 				else if (item.merged_at)
		// 					embed.fields?.push({
		// 						name: "Merged At",
		// 						value: item.merged_at!,
		// 						inline: true,
		// 					});
		// 				else {
		// 					embed.fields?.push({
		// 						name: "Draft",
		// 						value: item.draft ? "Yes" : "No",
		// 						inline: true,
		// 					});
		// 				}
		// 			}
		// 			if (item.assignees?.length)
		// 				embed.fields?.push({
		// 					name: "Assignees",
		// 					value: item.assignees
		// 						.map((assignee) => assignee.login)
		// 						.join(", "),
		// 					inline: true,
		// 				});
		// 			if (item.requested_reviewers?.length)
		// 				embed.fields?.push({
		// 					name: "Requested Reviewers",
		// 					value: item.requested_reviewers
		// 						.map((reviewer) => reviewer.login)
		// 						.join(", "),
		// 					inline: true,
		// 				});
		// 			if (item.requested_teams?.length)
		// 				embed.fields?.push({
		// 					name: "Requested Teams",
		// 					value: item.requested_teams.map((team) => team.name).join(", "),
		// 					inline: true,
		// 				});
		// 			if (item.milestone)
		// 				embed.fields?.push({
		// 					name: "Milestone",
		// 					value: item.milestone.title,
		// 					inline: true,
		// 				});
		// 			embeds.push(embed);
		// 		});

		// 		return await embedMaker(res, embeds);
		// 	}
		// 	case "create": {
		// 		const title = options?.get("title");
		// 		const head = options?.get("head");
		// 		const head_repo = options?.get("head_repo");
		// 		const base = options?.get("base");
		// 		const issue = options?.get("issue");
		// 		const body = options?.get("body");
		// 		const draft = options?.get("draft");
		// 		const maintainer_can_modify = options?.get("maintainer_can_modify");

		// 		if (!issue && !title) {
		// 			return res.json({
		// 				type: InteractionResponseType.ChannelMessageWithSource,
		// 				data: {
		// 					content: "Issue or title is required",
		// 					flags: MessageFlags.Ephemeral,
		// 				},
		// 			});
		// 		}
		// 		const create = await gh[1]?.rest.pulls.create({
		// 			owner,
		// 			repo,
		// 			title,
		// 			head,
		// 			head_repo,
		// 			base,
		// 			issue,
		// 			body,
		// 			draft,
		// 			maintainer_can_modify,
		// 		});
		// 		if (!create)
		// 			return res.json({
		// 				type: InteractionResponseType.ChannelMessageWithSource,
		// 				data: {
		// 					content: "Failed to create pull request.",
		// 					flags: MessageFlags.Ephemeral,
		// 				},
		// 			});
		// 		const embed: APIEmbed = {
		// 			author: {
		// 				name: create.data.user!.login,
		// 				icon_url: create.data.user?.avatar_url,
		// 			},
		// 			title: create.data.title + " #" + create.data.number,
		// 			url: create.data.html_url,
		// 			description: create.data.body || "no description",
		// 			fields: [
		// 				{ name: "State", value: create.data.state, inline: true },
		// 				{ name: "Base", value: create.data.base.label, inline: true },
		// 				{ name: "Head", value: create.data.head.label, inline: true },
		// 				{ name: "Issue", value: create.data.issue_url, inline: true },
		// 				{
		// 					name: "Draft",
		// 					value: create.data.draft ? "Yes" : "No",
		// 					inline: true,
		// 				},
		// 				{
		// 					name: "Maintainer Can Modify",
		// 					value: create.data.maintainer_can_modify ? "Yes" : "No",
		// 					inline: true,
		// 				},
		// 				{
		// 					name: "labels",
		// 					value: create.data.labels.map((label) => label.name).join(", "),
		// 					inline: true,
		// 				},
		// 			],
		// 			timestamp: create.data.created_at,
		// 			footer: {
		// 				text: "Created",
		// 			},
		// 		};
		// 		return res.json({
		// 			type: InteractionResponseType.ChannelMessageWithSource,
		// 			data: {
		// 				embeds: [embed],
		// 			},
		// 		});
		// 	}
		// 	case "get": {
		// 		const pull_number = options?.get("pull_number");
		// 		const get = await gh[1]?.rest.pulls.get({
		// 			owner,
		// 			repo,
		// 			pull_number,
		// 		});
		// 		if (!get)
		// 			return res.json({
		// 				type: InteractionResponseType.ChannelMessageWithSource,
		// 				data: {
		// 					content: "Pull request not found.",
		// 					flags: MessageFlags.Ephemeral,
		// 				},
		// 			});
		// 		const embed: APIEmbed = {
		// 			author: {
		// 				name: get.data.user!.login,
		// 				icon_url: get.data.user?.avatar_url,
		// 			},
		// 			title: get.data.title + " #" + get.data.number,
		// 			url: get.data.html_url,
		// 			description: get.data.body || "no description",
		// 			fields: [
		// 				{ name: "State", value: get.data.state, inline: true },
		// 				{ name: "Base", value: get.data.base.label, inline: true },
		// 				{ name: "Head", value: get.data.head.label, inline: true },
		// 				{ name: "Issue", value: get.data.issue_url, inline: true },
		// 				{
		// 					name: "Draft",
		// 					value: get.data.draft ? "Yes" : "No",
		// 					inline: true,
		// 				},
		// 				{
		// 					name: "Maintainer Can Modify",
		// 					value: get.data.maintainer_can_modify ? "Yes" : "No",
		// 					inline: true,
		// 				},
		// 				{
		// 					name: "labels",
		// 					value: get.data.labels.map((label) => label.name).join(", "),
		// 					inline: true,
		// 				},
		// 			],
		// 			timestamp: get.data.created_at,
		// 			footer: {
		// 				text: "Created",
		// 			},
		// 		};
		// 	}

		// 	case "update":
		// 		break;
		// 	case "list-commits":
		// 		break;
		// 	case "check-merge":
		// 		break;
		// 	case "merge":
		// 		break;
		// 	case "close":
		// 		break;
		// 	default:
		// 		break;
		// }